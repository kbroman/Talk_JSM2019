// Generated by CoffeeScript 2.3.2
// function to create background, axes, and axis labels
var plotframe;

plotframe = function(data, args = null, svgscale = {
    svg: null,
    x: null,
    y: null
  }) {
  var chartname, height, num_x_ticks, num_y_ticks, pad, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rotation, tickPadding, width, x_axis, x_max, x_min, x_name, x_ticks, xlab, y_axis, y_max, y_min, y_name, y_ticks, ylab, ylab_rotate, ylabel;
  // default name to place chart
  chartname = (ref = args != null ? args.chartname : void 0) != null ? ref : "body";
  // create SVG object if necessary
  if (svgscale.svg === null) {
    height = (ref1 = args != null ? args.height : void 0) != null ? ref1 : 500;
    width = (ref2 = args != null ? args.width : void 0) != null ? ref2 : 800;
    svgscale.svg = d3.select(chartname).append("svg").attr("height", height).attr("width", width);
  }
  // padding
  pad = (ref3 = args != null ? args.pad : void 0) != null ? ref3 : {
    bottom: 50,
    left: 50,
    top: 3,
    right: 3,
    scale: 0.05
  };
  // make background rectangle
  svgscale.svg.append("rect").attr("id", "bgrect").attr("x", pad.left).attr("y", pad.top).attr("width", width - (pad.left + pad.right)).attr("height", height - (pad.top + pad.bottom));
  // names of X and Y variables
  x_name = (ref4 = args != null ? args.x_name : void 0) != null ? ref4 : "x";
  y_name = (ref5 = args != null ? args.y_name : void 0) != null ? ref5 : "y";
  // X and Y min and max
  x_min = (ref6 = args != null ? args.x_min : void 0) != null ? ref6 : d3.min(data, function(d) {
    return d[x_name];
  });
  x_max = (ref7 = args != null ? args.x_max : void 0) != null ? ref7 : d3.max(data, function(d) {
    return d[x_name];
  });
  y_min = (ref8 = args != null ? args.y_min : void 0) != null ? ref8 : d3.min(data, function(d) {
    return d[y_name];
  });
  y_max = (ref9 = args != null ? args.y_max : void 0) != null ? ref9 : d3.max(data, function(d) {
    return d[y_name];
  });
  x_min -= (x_max - x_min) * pad.scale;
  x_max += (x_max - x_min) * pad.scale;
  y_min -= (y_max - y_min) * pad.scale;
  y_max += (y_max - y_min) * pad.scale;
  // create X and Y scales if necessary
  if (svgscale.x === null) {
    svgscale.x = d3.scale.linear().domain([x_min, x_max]).range([pad.left, width - pad.right]);
  }
  if (svgscale.y === null) {
    svgscale.y = d3.scale.linear().domain([y_min, y_max]).range([height - pad.bottom, pad.top]);
  }
  // numbers of ticks
  num_x_ticks = (ref10 = args != null ? args.num_x_ticks : void 0) != null ? ref10 : 6;
  num_y_ticks = (ref11 = args != null ? args.num_y_ticks : void 0) != null ? ref11 : 6;
  tickPadding = (ref12 = args != null ? args.tickPadding : void 0) != null ? ref12 : 3;
  x_axis = d3.svg.axis().scale(svgscale.x).orient("bottom").ticks(num_x_ticks).tickSize(0, 0, 0).tickPadding(tickPadding);
  y_axis = d3.svg.axis().scale(svgscale.y).orient("left").ticks(num_y_ticks).tickSize(0, 0, 0).tickPadding(tickPadding);
  x_ticks = svgscale.x.ticks(num_x_ticks);
  y_ticks = svgscale.y.ticks(num_y_ticks);
  // vertical and horizontal lines
  svgscale.svg.selectAll("#verline").data(x_ticks).enter().append("line").attr("x1", function(d) {
    return svgscale.x(d);
  }).attr("x2", function(d) {
    return svgscale.x(d);
  }).attr("id", "verline").attr("fill", "none").attr("stroke", "white").attr("y1", pad.top).attr("y2", height - pad.bottom);
  svgscale.svg.selectAll("#horline").data(y_ticks).enter().append("line").attr("y1", function(d) {
    return svgscale.y(d);
  }).attr("y2", function(d) {
    return svgscale.y(d);
  }).attr("id", "horline").attr("fill", "none").attr("stroke", "white").attr("x1", pad.left).attr("x2", width - pad.right);
  // x and y axis numbers
  svgscale.svg.append("g").attr("class", "axis").attr("transform", `translate(0, ${height - pad.bottom})`).call(x_axis);
  svgscale.svg.append("g").attr("class", "axis").attr("transform", `translate(${pad.left}, 0)`).call(y_axis);
  // x and y axis labels
  xlab = (ref13 = args != null ? args.xlab : void 0) != null ? ref13 : x_name;
  ylab = (ref14 = args != null ? args.ylab : void 0) != null ? ref14 : y_name;
  ylab_rotate = (ref15 = args != null ? args.ylab_rotate : void 0) != null ? ref15 : 270;
  svgscale.svg.append("text").attr("x", (pad.left + width - pad.right) / 2).attr("y", height - pad.bottom / 4).attr("class", "axislabel").attr("style", "dominant-baseline:hanging").attr("style", "text-anchor:middle").style("font-family", "sans-serif").text(xlab);
  if (ylab_rotate) {
    rotation = `rotate( ${ylab_rotate} ${pad.left / 4} ${(pad.top + height - pad.bottom) / 2})`;
  } else {
    rotation = "rotate(0 0 0)";
  }
  ylabel = svgscale.svg.append("text").attr("x", pad.left / 4).attr("y", (pad.top + height - pad.bottom) / 2).attr("class", "axislabel").attr("style", "dominant-baseline:middle").attr("style", "text-anchor:middle").style("font-family", "sans-serif").attr("transform", rotation).text(ylab);
  d3.selectAll(".tick text").attr("fill", "white"); // not sure why I need this
  return svgscale;
};
